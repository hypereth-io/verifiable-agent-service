import React, { useState, useEffect } from 'react'
import { useAppStore } from '../../stores/appStore'
import { contractService, demoContractService } from '../../services/contracts'
import Card from '../Common/Card'
import Button from '../Common/Button'

const VerifyOnChain = () => {
  const {
    agent,
    attestation,
    setCurrentStep,
    setIsVerified,
    loading,
    setLoading,
    error,
    setError,
    clearError,
    isDemoMode,
  } = useAppStore()

  const [walletConnected, setWalletConnected] = useState(false)
  const [walletAddress, setWalletAddress] = useState('')
  const [txHash, setTxHash] = useState('')
  const [registrationStatus, setRegistrationStatus] = useState('pending') // pending, processing, completed

  useEffect(() => {
    if (!agent || !attestation) {
      setCurrentStep('register')
    }
  }, [agent, attestation, setCurrentStep])

  const handleConnectWallet = async () => {
    clearError()
    setLoading('verification', true)

    try {
      const contractSvc = isDemoMode ? demoContractService : contractService
      const connectionInfo = await contractSvc.connect('testnet')
      
      setWalletConnected(true)
      setWalletAddress(connectionInfo.address)
    } catch (err) {
      console.error('Failed to connect wallet:', err)
      setError(err.message || 'Failed to connect wallet')
    } finally {
      setLoading('verification', false)
    }
  }

  const handleRegisterOnChain = async () => {
    if (!walletConnected || !attestation) return

    clearError()
    setLoading('verification', true)
    setRegistrationStatus('processing')

    try {
      const contractSvc = isDemoMode ? demoContractService : contractService
      
      // Register agent with attestation quote
      const tx = await contractSvc.registerAgent(attestation.quote)
      setTxHash(tx.hash)
      
      // Wait for transaction confirmation
      const receipt = await tx.wait()
      
      if (receipt.status === 1) {
        setRegistrationStatus('completed')
        setIsVerified(true)
        
        // Auto-advance to dashboard after a delay
        setTimeout(() => {
          setCurrentStep('dashboard')
        }, 3000)
      } else {
        throw new Error('Transaction failed')
      }
    } catch (err) {
      console.error('Registration failed:', err)
      setRegistrationStatus('pending')
      setError(err.message || 'Failed to register on-chain')
    } finally {
      setLoading('verification', false)
    }
  }

  const handleSkipToNext = () => {
    setCurrentStep('dashboard')
  }

  if (!agent || !attestation) {
    return null
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="text-center space-y-4">
        <h1 className="text-4xl font-bold font-hyperwave">On-Chain Verification</h1>
        <p className="text-xl text-text-secondary font-light max-w-2xl mx-auto">
          Register your TEE attestation on the Hyperliquid blockchain to enable verifiable agent trading
        </p>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        {/* Attestation Details */}
        <Card 
          title="TEE Attestation Report"
          subtitle="Generated by Intel TDX environment"
        >
          <div className="space-y-4">
            <div className="p-4 bg-border-primary rounded-lg border border-border-secondary">
              <div className="flex items-center gap-2 mb-3">
                <CheckIcon className="w-5 h-5 text-green-400" />
                <span className="font-medium text-green-400">Agent Created Successfully</span>
              </div>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-text-secondary">Agent Address:</span>
                  <span className="font-mono text-text-primary">
                    {agent.address.slice(0, 6)}...{agent.address.slice(-4)}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-text-secondary">User ID:</span>
                  <span className="text-text-primary">{agent.userId}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-text-secondary">Created:</span>
                  <span className="text-text-primary">
                    {new Date(agent.createdAt).toLocaleString()}
                  </span>
                </div>
              </div>
            </div>

            <div className="space-y-3">
              <h3 className="font-medium">Attestation Details</h3>
              
              <div className="space-y-3 text-sm">
                <div>
                  <label className="block text-text-secondary mb-1">MRENCLAVE (Measurement)</label>
                  <div className="p-2 bg-background rounded font-mono text-xs break-all">
                    {attestation.mrenclave}
                  </div>
                </div>
                
                <div>
                  <label className="block text-text-secondary mb-1">MRSIGNER (Authority)</label>
                  <div className="p-2 bg-background rounded font-mono text-xs break-all">
                    {attestation.mrsigner}
                  </div>
                </div>
                
                <div>
                  <label className="block text-text-secondary mb-1">Quote (Truncated)</label>
                  <div className="p-2 bg-background rounded font-mono text-xs break-all">
                    {attestation.quote.slice(0, 100)}...
                  </div>
                </div>
              </div>
            </div>
          </div>
        </Card>

        {/* Registration Process */}
        <Card 
          title="Blockchain Registration"
          subtitle="Register attestation on Hyperliquid"
        >
          <div className="space-y-6">
            {/* Wallet Connection */}
            <div className="space-y-3">
              <h3 className="font-medium">1. Connect Wallet</h3>
              {!walletConnected ? (
                <Button
                  onClick={handleConnectWallet}
                  loading={loading.verification && !walletConnected}
                  className="w-full"
                >
                  Connect to Hyperliquid Network
                </Button>
              ) : (
                <div className="p-3 bg-green-500/10 border border-green-500/20 rounded-xl">
                  <div className="flex items-center gap-2">
                    <CheckIcon className="w-4 h-4 text-green-400" />
                    <span className="text-sm font-medium text-green-400">Wallet Connected</span>
                  </div>
                  <p className="text-xs text-green-400/80 mt-1 font-mono">
                    {walletAddress}
                  </p>
                </div>
              )}
            </div>

            {/* Registration */}
            <div className="space-y-3">
              <h3 className="font-medium">2. Register Attestation</h3>
              {registrationStatus === 'pending' && (
                <Button
                  onClick={handleRegisterOnChain}
                  disabled={!walletConnected}
                  loading={loading.verification && walletConnected}
                  className="w-full"
                >
                  Register Agent On-Chain
                </Button>
              )}
              
              {registrationStatus === 'processing' && (
                <div className="p-3 bg-blue-500/10 border border-blue-500/20 rounded-xl">
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 spinner border-blue-400"></div>
                    <span className="text-sm font-medium text-blue-400">Processing Transaction</span>
                  </div>
                  {txHash && (
                    <p className="text-xs text-blue-400/80 mt-1 font-mono">
                      TX: {txHash.slice(0, 10)}...{txHash.slice(-6)}
                    </p>
                  )}
                </div>
              )}
              
              {registrationStatus === 'completed' && (
                <div className="p-3 bg-green-500/10 border border-green-500/20 rounded-xl">
                  <div className="flex items-center gap-2">
                    <CheckIcon className="w-4 h-4 text-green-400" />
                    <span className="text-sm font-medium text-green-400">Registration Complete</span>
                  </div>
                  <p className="text-xs text-green-400/80 mt-1">
                    Agent is now verified and ready for trading
                  </p>
                </div>
              )}
            </div>

            {/* Registration Cost */}
            <div className="p-3 bg-border-primary rounded-xl border border-border-secondary">
              <h4 className="text-sm font-medium mb-2">Registration Fee</h4>
              <div className="flex justify-between text-sm">
                <span className="text-text-secondary">Network Fee:</span>
                <span>0.01 ETH</span>
              </div>
              <p className="text-xs text-text-secondary mt-1">
                One-time fee to register your agent on-chain
              </p>
            </div>

            {error && (
              <div className="p-3 bg-red-500/10 border border-red-500/20 rounded-xl">
                <p className="text-red-400 text-sm">{error}</p>
              </div>
            )}

            {/* Demo Mode Notice */}
            {isDemoMode && (
              <div className="p-3 bg-yellow-500/10 border border-yellow-500/20 rounded-xl">
                <div className="flex items-center gap-2">
                  <InfoIcon className="w-4 h-4 text-yellow-400" />
                  <span className="text-sm font-medium text-yellow-400">Demo Mode</span>
                </div>
                <p className="text-xs text-yellow-400/80 mt-1">
                  Simulated blockchain interaction - no real transaction
                </p>
              </div>
            )}

            {/* Skip Option */}
            <div className="pt-3 border-t border-border-primary">
              <Button
                variant="ghost"
                onClick={handleSkipToNext}
                className="w-full"
              >
                Skip to Dashboard →
              </Button>
            </div>
          </div>
        </Card>
      </div>
    </div>
  )
}

// Icon components
const CheckIcon = ({ className }) => (
  <svg viewBox="0 0 20 20" className={className}>
    <path
      d="M6 10l2 2 6-6"
      stroke="currentColor"
      strokeWidth="2"
      fill="none"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
)

const InfoIcon = ({ className }) => (
  <svg viewBox="0 0 20 20" className={className}>
    <circle cx="10" cy="10" r="8" stroke="currentColor" strokeWidth="1.5" fill="none" />
    <path d="M10 14v-4M10 6h.01" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
  </svg>
)

export default VerifyOnChain